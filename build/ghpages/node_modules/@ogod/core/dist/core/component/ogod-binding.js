var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, LitElement, property } from "../../../../../lit-element/lit-element.js";
import { OgodBindingRuntime } from "../state/ogod-binding.js";
let OgodBindingElement = class OgodBindingElement extends LitElement {
  constructor() {
    super();
    this.type = 'EQUAL';

    this.impl = () => new OgodBindingRuntime();
  }

  getEntity() {
    return {
      type: this.type,
      fromGlToWeb: this.fromGlToWeb,
      fromWebToGl: this.fromWebToGl
    };
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  connectedCallback() {
    this.classList.add('ogodBinding');
    super.connectedCallback();
  }

};

__decorate([property()], OgodBindingElement.prototype, "type", void 0);

__decorate([property({
  attribute: false
})], OgodBindingElement.prototype, "fromWebToGl", void 0);

__decorate([property({
  attribute: false
})], OgodBindingElement.prototype, "fromGlToWeb", void 0);

__decorate([property({
  attribute: false
})], OgodBindingElement.prototype, "impl", void 0);

OgodBindingElement = __decorate([customElement('ogod-binding')], OgodBindingElement);
export { OgodBindingElement }; //# sourceMappingURL=ogod-binding.js.map