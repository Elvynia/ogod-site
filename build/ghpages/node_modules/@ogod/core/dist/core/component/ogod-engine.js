var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, html, property } from "../../../../../lit-element/lit-element.js";
import { DefaultEngineRuntime } from "../../runtime/default/state/default-engine.js";
import { createEngine, destroyEngine, loadEngine, togglePauseEngine } from "../redux/action.js";
import { ogodStore } from "../redux/store.js";
import { createListenerOn, ReleasableLitElement } from "../utils.js";
let OgodEngineElement = class OgodEngineElement extends ReleasableLitElement {
  constructor() {
    super();

    this.impl = () => new DefaultEngineRuntime();

    this.pauseOnEscape = false;
    this.appState = ogodStore;
  }

  render() {
    return html`
        <slot></slot>
    `;
  }

  getEntity() {
    if (this.initScene) {
      this.loadMap = Object.assign({}, this.loadMap, {
        initScene: this.initScene
      });
    }

    return {
      id: this.id,
      renderer: undefined,
      loadMap: this.loadMap,
      currentScene: undefined,
      loaded: false,
      loading: false,
      paused: false,
      started: false
    };
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  async connectedCallback() {
    if (!this.id) {
      this.id = 'ogod-default-engine';
    }

    this.classList.add('ogodEngine');
    this.style.display = 'block';
    super.connectedCallback();
    ogodStore.dispatch(createEngine(this.getEntity(), this.getRuntime()));
    await super.updateComplete;
    ogodStore.dispatch(loadEngine(this.id));

    if (this.pauseOnEscape) {
      this.releaseOnDestroy(createListenerOn(window, 'keyup', this.pauseOnEscapeListener.bind(this)));
    }
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    setTimeout(() => {
      ogodStore.dispatch(destroyEngine(this.id));
    });
  }

  pauseOnEscapeListener(e) {
    let engine = this.appState.getState().engines[this.id];

    if (engine && engine.entity.started && e.key === 'Escape') {
      this.appState.dispatch(togglePauseEngine(this.id));
    }
  }

};

__decorate([property({
  reflect: true
})], OgodEngineElement.prototype, "id", void 0);

__decorate([property({
  converter: val => val === '' ? true : JSON.parse(val)
})], OgodEngineElement.prototype, "pauseOnEscape", void 0);

__decorate([property({
  attribute: 'load-map',
  converter: val => JSON.parse(val)
})], OgodEngineElement.prototype, "loadMap", void 0);

__decorate([property({
  attribute: 'init-scene'
})], OgodEngineElement.prototype, "initScene", void 0);

__decorate([property({
  attribute: false
})], OgodEngineElement.prototype, "impl", void 0);

__decorate([property({
  attribute: false
})], OgodEngineElement.prototype, "appState", void 0);

OgodEngineElement = __decorate([customElement('ogod-engine')], OgodEngineElement);
export { OgodEngineElement }; //# sourceMappingURL=ogod-engine.js.map