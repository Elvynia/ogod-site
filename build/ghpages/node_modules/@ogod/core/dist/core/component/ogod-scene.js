var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, html, property } from "../../../../../lit-element/lit-element.js";
import { distinctUntilChanged, filter, map, switchMapTo, take } from "../../../../../rxjs/_esm5/operators/index.js";
import { DefaultSceneRuntime } from "../../runtime/default/state/default-scene.js";
import { createScene, destroyScene } from "../redux/action.js";
import { ogodState$, ogodStore } from "../redux/store.js";
import { OgodSceneSubject } from "../state/ogod-scene-subject.js";
import { ReleasableLitElement, lookupByClassName } from "../utils.js";
let OgodSceneElement = class OgodSceneElement extends ReleasableLitElement {
  constructor() {
    super();

    this.impl = () => new DefaultSceneRuntime();

    this.loadMap = {
      lazy: false
    };
  }

  get engineId() {
    if (this._engineId === undefined) {
      this._engineId = lookupByClassName(this, 'ogodEngine', 'id');
    }

    return this._engineId;
  }

  getEntity() {
    if (this.lazy !== undefined) {
      this.loadMap = Object.assign({}, this.loadMap, {
        lazy: this.lazy
      });
    }

    return {
      id: this.id,
      engineId: this.engineId,
      loadMap: this.loadMap,
      children: [],
      loaded: false,
      loading: false,
      changes: new OgodSceneSubject()
    };
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  render() {
    return html`
        <slot></slot>
    `;
  }

  async connectedCallback() {
    if (!this.id) {
      this.id = 'ogod-default-scene';
    }

    this.classList.add('ogodScene');
    super.connectedCallback();
    await super.updateComplete;
    ogodStore.dispatch(createScene(this.getEntity(), this.getRuntime()));
    this.releaseOnDestroy(ogodState$().pipe(filter(state => state.engines[this.engineId].entity.loaded), map(state => state.engines[this.engineId].entity.currentScene), distinctUntilChanged(), switchMapTo(ogodState$().pipe(map(state => state.engines[this.engineId].entity), take(1)))).subscribe(engine => {
      let target = this.getHost();

      if (target && engine.currentScene === this.id) {
        target.classList.add('ogodActive');
        target.style.zIndex = '0';
      } else if (target) {
        target.classList.remove('ogodActive');
        target.style.zIndex = '-1';
      }
    }));
  }

  disconnectedCallback() {
    ogodStore.dispatch(destroyScene(this.id));
    super.disconnectedCallback();
  }

  getHost() {
    if (this.parentElement.classList.contains('ogodRenderer')) {
      return this;
    } else {
      return lookupByClassName(this, 'ogodSceneHost');
    }
  }

};

__decorate([property({
  reflect: true
})], OgodSceneElement.prototype, "id", void 0);

__decorate([property({
  attribute: 'load-map',
  converter: val => JSON.parse(val)
})], OgodSceneElement.prototype, "loadMap", void 0);

__decorate([property({
  converter: val => val === '' ? true : JSON.parse(val)
})], OgodSceneElement.prototype, "lazy", void 0);

__decorate([property({
  attribute: false
})], OgodSceneElement.prototype, "impl", void 0);

OgodSceneElement = __decorate([customElement('ogod-scene')], OgodSceneElement);
export { OgodSceneElement }; //# sourceMappingURL=ogod-scene.js.map