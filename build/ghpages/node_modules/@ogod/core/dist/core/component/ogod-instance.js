var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, property, html } from "../../../../../lit-element/lit-element.js";
import { ogodStore, ogodState$ } from "../redux/store.js";
import { createInstance, cloneInstance, addInstanceProperty, removeInstanceProperty, destroyInstance, removeFromScene, changeInstance } from "../redux/action.js";
import { createObserverOn, ReleasableLitElement, lookupByClassName } from "../utils.js";
import { pluck, take, filter, switchMap } from "../../../../../rxjs/_esm5/operators/index.js";
import { from, empty } from "../../../../../rxjs/_esm5/index.js";
let OgodInstanceElement = class OgodInstanceElement extends ReleasableLitElement {
  constructor() {
    super();
    this.cloned = false;
  }

  get engineId() {
    if (this._engineId === undefined) {
      this._engineId = lookupByClassName(this, 'ogodEngine', 'id');
    }

    return this._engineId;
  }

  get sceneId() {
    if (this._sceneId === undefined) {
      this._sceneId = lookupByClassName(this, 'ogodScene', 'id');
    }

    return this._sceneId;
  }

  getEntity() {
    return {
      id: this.name,
      engineId: this.engineId,
      sceneId: this.sceneId,
      properties: this.computeProps(),
      zIndex: this.zIndex,
      resources: this.computeResources(),
      initialized: false,
      loaded: false,
      loading: false
    };
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  async addFeature(feature) {
    this.getRuntime().addFeature(feature, ogodStore.getState().instances[this.name].entity);
  }

  render() {
    return html`
      <slot></slot>
    `;
  }

  async _getUpdateComplete() {
    await super._getUpdateComplete();

    if (this.properties) {
      return Promise.all(Object.values(this.properties).map(prop => prop.updateComplete));
    } else {
      return empty().toPromise();
    }
  }

  firstUpdated() {
    this.properties = {};
    from(this.shadowRoot.querySelectorAll('.ogodProperty')).subscribe(prop => this.properties[prop.name] = prop);
    from(this.querySelectorAll('.ogodProperty')).subscribe(prop => this.properties[prop.name] = prop);
    this.watchPropertyChange();
  }

  async updated(changes) {
    await this.updateComplete;

    if (changes.has('resource') || changes.has('resources')) {
      if (ogodStore.getState().instances[this.name]) {
        ogodStore.dispatch(changeInstance(this.name, {
          resources: this.computeResources()
        }));
      }
    }
  }

  async connectedCallback() {
    this.classList.add('ogodInstance');
    super.connectedCallback();

    if (!this.name) {
      throw new Error('Cannot use ogod-instance without a unique identifier (ex: <ogod-instance id="actor1">...</ogod-instance> )');
    }

    if (!this.impl) {
      throw new Error('Cannot use ogod-instance without a function that return runtime implementation (impl=[[func]])');
    }

    await this.updateComplete;
    ogodState$().pipe(pluck('instances'), pluck(this.name), take(1)).subscribe(instance => {
      if (instance) {
        this.cloned = true;
        ogodStore.dispatch(cloneInstance(this.name, this.engineId, this.sceneId, this.zIndex));
      } else {
        ogodStore.dispatch(createInstance(this.getEntity(), this.getRuntime()));
      }
    });
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    ogodStore.dispatch(removeFromScene(this.sceneId, this.name));

    if (!this.cloned) {
      setTimeout(() => {
        ogodStore.dispatch(destroyInstance(this.name));
      });
    }
  }

  computeProps() {
    let props = {};

    for (let prop of Object.values(this.properties)) {
      props[prop.name] = {
        entity: prop.getEntity(),
        runtime: prop.getRuntime()
      };
    }

    return props;
  }

  computeResources() {
    let resources = [];

    if (this.resources) {
      resources.concat(this.resources);
    }

    if (this.resource) {
      resources.push(this.resource);
    }

    return resources;
  }

  watchPropertyChange() {
    this.releaseOnDestroy(createObserverOn(this, this.mutationsListener.bind(this)));
    this.releaseOnDestroy(createObserverOn(this.shadowRoot, this.mutationsListener.bind(this)));
  }

  mutationsListener(mutations) {
    return from(mutations).pipe(filter(mutation => mutation.type === 'childList'), filter(mutation => mutation.removedNodes.length > 0 || mutation.addedNodes.length > 0), switchMap(mutation => {
      let children = [];

      if (mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(node => children.push({
          added: true,
          node
        }));
      }

      if (mutation.removedNodes.length > 0) {
        mutation.removedNodes.forEach(node => children.push({
          added: false,
          node
        }));
      }

      return from(children);
    }), filter(mutation => mutation.node.classList && mutation.node.classList.contains('ogodProperty'))).subscribe(mutation => {
      let el = mutation.node;

      if (mutation.added) {
        addInstanceProperty(this.name, el.name, {
          entity: el.getEntity(),
          runtime: el.getRuntime()
        });
      } else {
        removeInstanceProperty(this.name, el.name);
      }
    });
  }

};

__decorate([property({
  reflect: true
})], OgodInstanceElement.prototype, "name", void 0);

__decorate([property({
  attribute: false
})], OgodInstanceElement.prototype, "impl", void 0);

__decorate([property({
  type: Array
})], OgodInstanceElement.prototype, "resources", void 0);

__decorate([property({
  reflect: true
})], OgodInstanceElement.prototype, "resource", void 0);

__decorate([property({
  attribute: false
})], OgodInstanceElement.prototype, "properties", void 0);

__decorate([property({
  reflect: true
})], OgodInstanceElement.prototype, "zIndex", void 0);

OgodInstanceElement = __decorate([customElement('ogod-instance')], OgodInstanceElement);
export { OgodInstanceElement }; //# sourceMappingURL=ogod-instance.js.map