import { BaseRuntime } from "../utils.js";
export class OgodPropertyEntity {
  constructor(name, value, binding) {
    this.name = name;
    this.binding = binding;
    this.glValue = !this.binding || this.binding.entity.fromGlToWeb ? value : undefined;
    this.webValue = this.binding && this.binding.entity.fromWebToGl ? value : undefined;
  }

}
export class OgodPropertyRuntime extends BaseRuntime {
  update(entity) {
    if (entity.binding) {
      entity.binding.entity.inValue = entity.binding.entity.fromWebToGl ? entity.webValue : entity.glValue;
      entity.binding.entity.outValue = entity.binding.entity.fromWebToGl ? entity.glValue : entity.webValue;
      let newBind = entity.binding.runtime.update(entity.binding.entity);
      let newEntity;

      if (entity.binding.entity === newBind) {
        newEntity = entity;
      } else {
        newEntity = Object.assign({}, entity, {
          binding: Object.assign({}, entity.binding, {
            entity: newBind
          })
        });

        if (entity.binding.entity.fromWebToGl) {
          newEntity.glValue = newBind.outValue;
        } else {
          newEntity.webValue = newBind.outValue;
        }
      }

      return newEntity;
    } else if (JSON.stringify(entity.glValue) !== JSON.stringify(this.oldValue)) {
      this.oldValue = entity.glValue;
      return Object.assign({}, entity);
    }

    return entity;
  }

  destroy(_entity) {}

} //# sourceMappingURL=ogod-property.js.map