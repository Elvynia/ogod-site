import { applyMiddleware, combineReducers, createStore } from "../../../../../redux/es/redux.js";
import { createEpicMiddleware } from "../../../../../redux-observable/lib/esm/index.js";
import { Observable, BehaviorSubject } from "../../../../../rxjs/_esm5/index.js";
import { ogodEpic } from "./epic.js";
import { ogodReducer } from "./reducer.js";

function createReducer(asyncReducers) {
  return combineReducers(Object.assign({}, ogodReducer, asyncReducers));
}

export function configureStore() {
  const epicMiddleware = createEpicMiddleware();
  const store = createStore(createReducer(), {}, applyMiddleware(epicMiddleware));
  store.asyncReducers = {};

  store.injectReducer = (key, asyncReducer) => {
    store.asyncReducers[key] = asyncReducer;
    store.replaceReducer(createReducer(store.asyncReducers));
  };

  epicMiddleware.run(ogodEpic);
  return store;
}
export const ogodStore = configureStore();
const OGOD_STATE_ASYNC = new BehaviorSubject(ogodStore.getState());
let sub = new Observable(function (observer) {
  observer.next(ogodStore.getState());
  const unsubscribe = ogodStore.subscribe(function () {
    observer.next(ogodStore.getState());
  });
  return unsubscribe;
}).subscribe(OGOD_STATE_ASYNC);
export function ogodState$() {
  return OGOD_STATE_ASYNC;
} //# sourceMappingURL=store.js.map