import { DefaultInstanceRuntime, loadedInstance, OgodInstanceEntity } from "../../../core/dist/index.js";
import { of } from "../../../../rxjs/_esm5/index.js";
import { filter, map, mapTo, take, tap } from "../../../../rxjs/_esm5/operators/index.js";
import { Mesh } from "../../../../three/build/three.module.js";
export class ThreeMeshEntity extends OgodInstanceEntity {}
export class ThreeMeshRuntime extends DefaultInstanceRuntime {
  load(entity, state$) {
    if (entity.resources.length > 0) {
      return state$.pipe(map(state => state.resources[entity.resources[0]]), filter(resource => resource && resource.entity.loaded), map(resource => resource.entity.data), take(1), tap(texture => this.computeInstance(entity, texture)), mapTo(loadedInstance(entity)));
    } else {
      this.computeInstance(entity, undefined);
      return of(loadedInstance(entity));
    }
  }

  initialize(entity) {
    return super.initialize(entity);
  }

  changes(entity) {
    if (this.instance.geometry != entity.geometry) {
      console.log('CHANGING GEOMETRY');
      this.instance.geometry = entity.geometry;
    }

    return entity;
  }

  update(entity, delta) {
    this.instance.rotation.x += 0.005;
    this.instance.rotation.y += 0.01;
    return entity;
  }

  destroy(entity) {
    entity.geometry.dispose();
    entity.material.dispose();
  }

  computeInstance(entity, resource) {
    if (entity.material && entity.geometry) {
      if (resource) {
        entity.material.map = resource;
      }

      this.instance = new Mesh(entity.geometry, entity.material);
    } else {
      console.warn('Cannot build Three Mesh without material and geometry.');
    }
  }

} //# sourceMappingURL=three-mesh-runtime.js.map