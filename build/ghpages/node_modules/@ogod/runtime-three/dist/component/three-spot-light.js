var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, property } from "../../../../lit-element/lit-element.js";
import { OgodInstanceElement } from "../../../core/dist/index.js";
import { ThreeSpotLightRuntime } from "../state/three-spot-light-runtime.js";
let ThreeSpotLightElement = class ThreeSpotLightElement extends OgodInstanceElement {
  constructor() {
    super();

    this.impl = () => new ThreeSpotLightRuntime();
  }

  getEntity() {
    return Object.assign({}, super.getEntity(), {
      color: this.color,
      intensity: this.intensity,
      castShadow: this.castShadow
    });
  }

};

__decorate([property()], ThreeSpotLightElement.prototype, "color", void 0);

__decorate([property()], ThreeSpotLightElement.prototype, "intensity", void 0);

__decorate([property({
  attribute: 'cast-shadow',
  converter: val => val === '' ? true : JSON.parse(val)
})], ThreeSpotLightElement.prototype, "castShadow", void 0);

ThreeSpotLightElement = __decorate([customElement('three-spot-light')], ThreeSpotLightElement);
export { ThreeSpotLightElement }; //# sourceMappingURL=three-spot-light.js.map