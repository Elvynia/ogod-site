var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, html, property } from "../../../../lit-element/lit-element.js";
import { OgodRendererElement } from "../../../core/dist/index.js";
import { ThreeRendererRuntime } from "../state/three-renderer-runtime.js";
import { PerspectiveCamera } from "../../../../three/build/three.module.js";
let ThreeRendererElement = class ThreeRendererElement extends OgodRendererElement {
  constructor() {
    super();

    this.impl = () => new ThreeRendererRuntime();

    this.targetTemplate = html`<canvas slot="view" class="ogodView"></canvas>`;
  }

  getEntity() {
    return Object.assign({}, super.getEntity(), {
      camera: this.getCamera(),
      alpha: this.alpha || false
    });
  }

  getCamera() {
    if (!this.camera) {
      this.camera = new PerspectiveCamera(70, this.pixelWidth / this.pixelHeight, 1, 1000);
    }

    return this.camera;
  }

};

__decorate([property({
  converter: val => val === '' ? true : JSON.parse(val)
})], ThreeRendererElement.prototype, "alpha", void 0);

ThreeRendererElement = __decorate([customElement('three-renderer')], ThreeRendererElement);
export { ThreeRendererElement }; //# sourceMappingURL=three-renderer.js.map