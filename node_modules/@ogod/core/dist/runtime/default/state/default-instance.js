import { OgodInstanceRuntime } from "../../../core/index.js";
export class DefaultInstanceRuntime extends OgodInstanceRuntime {
  addFeature(feature, entity) {
    this.features.push(feature);

    if (entity.initialized) {
      feature.initialize(this, entity);
    }
  }

  initialize(entity) {
    this.features.forEach(f => f.initialize(this, entity));
    return Object.assign(Object.assign({}, entity), {
      properties: this.initAllProperties(entity),
      initialized: true
    });
  }

  start(entity) {
    return Object.assign(Object.assign({}, entity), {
      started: true
    });
  }

  stop(entity) {
    return Object.assign(Object.assign({}, entity), {
      started: false
    });
  }

  changes(entity, changes) {
    this.features.forEach(f => entity = f.changes(this, entity, changes));
    return Object.assign(Object.assign({}, entity), changes);
  }

  initAllProperties(entity) {
    let properties = entity.properties;

    if (properties && Object.keys(properties).length > 0) {
      let newProps = {};
      Object.values(properties).forEach(state => {
        if (state.entity.binding) {
          newProps[state.entity.name] = {
            runtime: state.runtime,
            entity: state.runtime.update(state.entity)
          };
        }
      });

      if (Object.keys(newProps).length > 0) {
        return Object.assign(Object.assign({}, properties), newProps);
      }
    }

    return properties;
  }

  changesProperty(entity, changes) {
    let property = entity.properties[changes.name];
    let propertyEntity = property.entity;

    if (changes) {
      propertyEntity = Object.assign(Object.assign({}, propertyEntity), changes);
    }

    return property.runtime.update(propertyEntity);
  }

  update(entity, delta) {
    let e;
    this.features.forEach(f => {
      let fe = f.update(this, entity, delta);

      if (entity !== fe) {
        e = Object.assign(Object.assign({}, e), fe);
      }
    });
    return e || entity;
  }

} //# sourceMappingURL=default-instance.js.map