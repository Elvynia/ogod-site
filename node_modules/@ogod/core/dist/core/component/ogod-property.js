var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, html, LitElement, property } from "../../../../../lit-element/lit-element.js";
import { empty } from "../../../../../rxjs/_esm5/index.js";
import { changeInstanceProperty } from "../redux/action.js";
import { ogodStore } from "../redux/store.js";
import { OgodPropertyRuntime } from "../state/ogod-property.js";
import { lookupByClassName } from "../utils.js";
let OgodPropertyElement = class OgodPropertyElement extends LitElement {
  constructor() {
    super();
    this.name = 'POSITION';
    this.value = {
      x: 0,
      y: 0,
      z: 0
    };

    this.impl = () => new OgodPropertyRuntime();
  }

  get instanceId() {
    if (this._instanceId === undefined) {
      this._instanceId = lookupByClassName(this, 'ogodInstance', 'name');
    }

    return this._instanceId;
  }

  getEntity() {
    let binding = this.getBinding();
    let values = {};

    if (!binding || binding.entity.fromGlToWeb) {
      values.glValue = this.value;
    } else if (binding.entity.fromWebToGl) {
      values.webValue = this.value;
    } else {
      console.warn('Binding is missing transformation function (use either from-web-to-gl or from-gl-to-web');
    }

    return Object.assign(Object.assign({
      name: this.name
    }, values), {
      binding: binding
    });
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  getBinding() {
    if (this.binding) {
      return {
        entity: this.binding.getEntity(),
        runtime: this.binding.getRuntime()
      };
    }

    return undefined;
  }

  render() {
    return html`
      <slot></slot>
    `;
  }

  async _getUpdateComplete() {
    await super._getUpdateComplete();

    if (this.binding) {
      return this.binding.updateComplete;
    } else {
      return empty().toPromise();
    }
  }

  firstUpdated() {
    this.binding = this.querySelector('.ogodBinding');
  }

  updated(changes) {
    if (ogodStore.getState().instances[this.instanceId]) {
      if (changes.has('value')) {
        ogodStore.dispatch(changeInstanceProperty(this.instanceId, this.getEntity()));
      }
    }
  }

  connectedCallback() {
    this.classList.add('ogodProperty');
    super.connectedCallback();
  }

};

__decorate([property({
  reflect: true
})], OgodPropertyElement.prototype, "name", void 0);

__decorate([property({
  converter: value => JSON.parse(value),
  hasChanged: (value, oldValue) => JSON.stringify(value) !== JSON.stringify(oldValue)
})], OgodPropertyElement.prototype, "value", void 0);

__decorate([property({
  attribute: false
})], OgodPropertyElement.prototype, "impl", void 0);

__decorate([property({
  attribute: false
})], OgodPropertyElement.prototype, "binding", void 0);

OgodPropertyElement = __decorate([customElement('ogod-property')], OgodPropertyElement);
export { OgodPropertyElement }; //# sourceMappingURL=ogod-property.js.map