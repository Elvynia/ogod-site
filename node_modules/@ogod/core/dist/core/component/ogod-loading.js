var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, html, LitElement, property } from "../../../../../lit-element/lit-element.js";
import { map, pluck } from "../../../../../rxjs/_esm5/operators/index.js";
import { ogodState$ } from "../redux/store.js";
import { lookupByClassName } from "../utils.js";
let OgodLoadingElement = class OgodLoadingElement extends LitElement {
  constructor() {
    super();
    this.loading = 'visible';
    this.angle = 0;
  }

  get engineId() {
    if (this._engineId === undefined) {
      this._engineId = lookupByClassName(this, 'ogodEngine', 'id');
    }

    return this._engineId;
  }

  render() {
    return html`
        <style rel="stylesheet">
            :host {
                display: block;
                height: 100%;
                width: 100%;
            }
            div.loader {
                text-align: center;
                height: 100%;
                width: 100%;
            }
            div.heavyText {
                position: relative;
                top: 50%;
                transform: translate(0, -50%);
                font-size: 28px;
                font-weight: bold;
                color: #3C3744;
            }
        </style>
        <div class="loader" style="background: linear-gradient(${this.angle}rad, #090C9B, #B4C5E4);visibility: ${this.loading}">
            <div class="heavyText">Please wait during engine initialization</div>
        </div>
        `;
  }

  async connectedCallback() {
    super.connectedCallback();
    let sub = ogodState$().pipe(pluck('engines'), map(engines => engines[this.engineId])).subscribe(state => {
      if (state) {
        let engine = state.entity;
        this.loading = engine.loading || !engine.loaded ? 'visible' : 'hidden';
        this.style.zIndex = engine.loaded ? '-1' : '1';

        if (engine.loaded) {
          setTimeout(() => sub.unsubscribe());
        }
      } else {
        this.loading = 'visible';
      }
    });
    setInterval(() => {
      this.angle = (this.angle + Math.PI / 10) % (Math.PI * 2);
    }, 80);
  }

};

__decorate([property({
  attribute: false
})], OgodLoadingElement.prototype, "angle", void 0);

__decorate([property({
  attribute: false
})], OgodLoadingElement.prototype, "loading", void 0);

OgodLoadingElement = __decorate([customElement('ogod-loading')], OgodLoadingElement);
export { OgodLoadingElement }; //# sourceMappingURL=ogod-loading.js.map