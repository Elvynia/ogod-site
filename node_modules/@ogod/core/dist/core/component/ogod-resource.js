var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement, LitElement, property } from "../../../../../lit-element/lit-element.js";
import { pluck, take } from "../../../../../rxjs/_esm5/operators/index.js";
import { createResource, destroyResource } from "../redux/action.js";
import { ogodState$, ogodStore } from "../redux/store.js";
import { lookupByClassName } from "../utils.js";
let OgodResourceElement = class OgodResourceElement extends LitElement {
  get engineId() {
    if (this._engineId === undefined) {
      this._engineId = lookupByClassName(this, 'ogodEngine', 'id');
    }

    return this._engineId;
  }

  get sceneId() {
    if (this._sceneId === undefined) {
      this._engineId = lookupByClassName(this, 'ogodScene', 'id');
    }

    return this._sceneId;
  }

  getEntity() {
    return {
      name: this.name,
      path: this.path,
      engineId: this.engineId,
      sceneId: this.sceneId,
      loaded: false,
      loading: false
    };
  }

  getRuntime() {
    if (!this.runtime) {
      this.runtime = this.impl();
    }

    return this.runtime;
  }

  async connectedCallback() {
    this.classList.add('ogodResource');
    super.connectedCallback();

    if (!this.name) {
      throw new Error('Cannot use ogod-resource without a unique identifier (ex: <ogod-resource id="resource001">...</ogod-resource> )');
    }

    if (!this.impl) {
      throw new Error('Cannot use ogod-resource without a function that return runtime implementation (impl=[[func]])');
    }

    await super.updateComplete;
    ogodState$().pipe(pluck('resources'), pluck(this.name), take(1)).subscribe(resource => {
      if (!resource) {
        ogodStore.dispatch(createResource(this.getEntity(), this.getRuntime()));
      }
    });
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    ogodStore.dispatch(destroyResource(this.name));
  }

};

__decorate([property({
  reflect: true
})], OgodResourceElement.prototype, "name", void 0);

__decorate([property({
  attribute: false
})], OgodResourceElement.prototype, "impl", void 0);

__decorate([property({
  reflect: true
})], OgodResourceElement.prototype, "path", void 0);

OgodResourceElement = __decorate([customElement('ogod-resource')], OgodResourceElement);
export { OgodResourceElement }; //# sourceMappingURL=ogod-resource.js.map