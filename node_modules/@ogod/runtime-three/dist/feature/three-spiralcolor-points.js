var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { customElement } from "../../../../lit-element/lit-element.js";
import { animationFrameScheduler } from "../../../../rxjs/_esm5/index.js";
import { Points } from "../../../../three/build/three.module.js";
import { ThreePointsElement } from "../component/three-points.js";
import { ThreePointsRuntime } from "../state/three-points-runtime.js";
export class ThreeSpiralColorPointsRuntime extends ThreePointsRuntime {
  constructor() {
    super();
    this.materials = [];
    this.instances = [];
    this.time = animationFrameScheduler.now() * 0.00005;
  }

  update(entity, delta) {
    this.time += delta * 0.00005;

    for (let i = 0; i < this.instances.length; i++) {
      this.instances[i].rotation.y = this.time * (i < 4 ? i + 1 : -(i + 1));
      let color = this.parameters[i][0];
      let h = 360 * (color[0] + this.time) % 360 / 360;
      this.materials[i].color.setHSL(h, color[1], color[2]);
    }

    return entity;
  }

  computeInstance(entity, resource) {
    if (entity.material && entity.geometry) {
      this.parameters = [[[1.0, 0.9, 0.5], resource[1], 20], [[0.95, 0.8, 0.5], resource[2], 15], [[0.90, 0.7, 0.5], resource[0], 10], [[0.85, 0.6, 0.5], resource[4], 8], [[0.80, 0.5, 0.5], resource[3], 5]];

      for (let i = 0; i < this.parameters.length; i++) {
        let color = this.parameters[i][0];
        let sprite = this.parameters[i][1];
        let size = this.parameters[i][2];
        this.materials[i] = entity.material.clone();
        this.materials[i].map = sprite;
        this.materials[i].size = size;
        this.materials[i].color.setHSL(color[0], color[1], color[2]);
        this.instances[i] = new Points(entity.geometry, this.materials[i]);
        this.instances[i].rotation.x = Math.random() * 6;
        this.instances[i].rotation.y = Math.random() * 6;
        this.instances[i].rotation.z = Math.random() * 6;
      }
    } else {
      console.warn('Cannot build Three Points without material and geometry.');
    }
  }

}
let ThreeSpiralcolorPointsElement = class ThreeSpiralcolorPointsElement extends ThreePointsElement {
  constructor() {
    super();

    this.impl = () => new ThreeSpiralColorPointsRuntime();
  }

};
ThreeSpiralcolorPointsElement = __decorate([customElement('three-spiralcolor-points')], ThreeSpiralcolorPointsElement);
export { ThreeSpiralcolorPointsElement }; //# sourceMappingURL=three-spiralcolor-points.js.map