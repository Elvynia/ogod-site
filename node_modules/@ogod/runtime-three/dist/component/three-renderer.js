var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import { customElement, html, property } from "../../../../lit-element/lit-element.js";
import { OgodRendererElement, ogodStore, changesEngineRenderer } from "../../../core/dist/index.js";
import { ThreeRendererRuntime } from "../state/three-renderer-runtime.js";
import { PerspectiveCamera } from "../../../../three/build/three.module.js";
let ThreeRendererElement = class ThreeRendererElement extends OgodRendererElement {
  constructor() {
    super();

    this.impl = () => new ThreeRendererRuntime();

    this.targetTemplate = html`<canvas slot="view" class="ogodView"></canvas>`;
  }

  getEntity() {
    return Object.assign({}, super.getEntity(), {
      camera: this.getCamera(),
      alpha: this.alpha || false
    });
  }

  getCamera() {
    if (!this.camera) {
      this.camera = new PerspectiveCamera(70, this.pixelWidth / this.pixelHeight, 1, 1000);
    }

    return this.camera;
  }

  connectedCallback() {
    const _super = Object.create(null, {
      connectedCallback: {
        get: () => super.connectedCallback
      }
    });

    return __awaiter(this, void 0, void 0, function* () {
      window.addEventListener('resize', e => {
        ogodStore.dispatch(changesEngineRenderer(this.engineId, {
          width: this.pixelWidth,
          height: this.pixelHeight
        }));
      });

      _super.connectedCallback.call(this);
    });
  }

};

__decorate([property({
  converter: val => val === '' ? true : JSON.parse(val)
})], ThreeRendererElement.prototype, "alpha", void 0);

ThreeRendererElement = __decorate([customElement('three-renderer')], ThreeRendererElement);
export { ThreeRendererElement }; //# sourceMappingURL=three-renderer.js.map