var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { OgodInstanceElement } from "../../../core/dist/index.js";
import { customElement, html } from "../../../../lit-element/lit-element.js";
import { ThreeMeshRuntime } from "../state/three-mesh-runtime.js";
let ThreeMeshElement = class ThreeMeshElement extends OgodInstanceElement {
  constructor() {
    super();

    this.impl = () => new ThreeMeshRuntime();
  }

  getEntity() {
    return Object.assign({}, super.getEntity(), {
      geometry: this.geometry.fixture,
      material: this.material.fixture
    });
  }

  render() {
    return html`<slot></slot>`;
  }

  firstUpdated() {
    super.firstUpdated();
    this.geometry = this.querySelector('.threeGeometry');
    this.material = this.querySelector('.threeMaterial');
  }

};
ThreeMeshElement = __decorate([customElement('three-mesh')], ThreeMeshElement);
export { ThreeMeshElement }; //# sourceMappingURL=three-mesh.js.map