import { DefaultRendererRuntime, OgodRendererEntity } from "../../../core/dist/index.js";
import { WebGLRenderer } from "../../../../three/build/three.module.js";
export class ThreeRendererEntity extends OgodRendererEntity {}
export class ThreeRendererRuntime extends DefaultRendererRuntime {
  initialize(entity) {
    this.instance = new WebGLRenderer({
      canvas: entity.target,
      antialias: true,
      alpha: entity.alpha
    });
    entity.camera.position.z = 400;
    return super.initialize(entity);
  }

  changes(entity, changes) {
    let e = super.changes(entity, changes);

    if (changes.width || changes.height) {
      this.resize(e);
    }

    return e;
  }

  render(entity, _delta, scene, _instances) {
    this.instance.render(scene.runtime.instance, entity.camera);
  }

  destroy() {
    this.instance.dispose();
  }

  resize(entity) {
    this.instance.setPixelRatio(entity.resolution);
    this.instance.setSize(entity.width, entity.height);
    let camera = entity.camera;
    camera.aspect = entity.width / entity.height;
    camera.updateProjectionMatrix();
  }

} //# sourceMappingURL=three-renderer-runtime.js.map