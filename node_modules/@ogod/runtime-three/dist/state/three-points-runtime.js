import { DefaultInstanceRuntime, loadedInstance, OgodInstanceEntity } from "../../../core/dist/index.js";
import { of } from "../../../../rxjs/_esm5/index.js";
import { filter, map, mapTo, take, tap } from "../../../../rxjs/_esm5/operators/index.js";
import { Points } from "../../../../three/build/three.module.js";
export class ThreePointsEntity extends OgodInstanceEntity {}
export class ThreePointsRuntime extends DefaultInstanceRuntime {
  load(entity, state$) {
    if (entity.resources.length > 0) {
      return state$.pipe(map(state => state.resources[entity.resources[0]]), filter(resource => resource && resource.entity.loaded), map(resource => resource.entity.data), take(1), tap(resource => this.computeInstance(entity, resource)), mapTo(loadedInstance(entity)));
    } else {
      this.computeInstance(entity, undefined);
      return of(loadedInstance(entity));
    }
  }

  destroy(entity) {
    entity.geometry.dispose();
    entity.material.dispose();
  }

  computeInstance(entity, resource) {
    if (entity.material && entity.geometry) {
      if (resource) {
        entity.material.map = resource;
      }

      this.instance = new Points(entity.geometry, entity.material);
    } else {
      console.warn('Cannot build Three Points without material and geometry.');
    }
  }

} //# sourceMappingURL=three-points-runtime.js.map